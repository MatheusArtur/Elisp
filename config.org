#+STARTUP: overview
#+TITLE: GNU/Emacs configuration.
* Basic configs
** Toolbar, menu and Scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1) 
#+END_SRC
** Replace Yes/No alias to y/n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Scrolls one line per time. instead of the retarded default
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Disable auto-save and backup files
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-file nil)
#+END_SRC
** Hightline cursor line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** Removes annoying ring bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Enable "pretty simbols" like lambda
#+BEGIN_SRC emacs-lisp
  (when window-system
        (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)))
#+END_SRC
** Disables startup messages
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Edit config file function  
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload config file function
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
** Manage windows like a pro
*** Use switch-window plugin, it only works with windows > 2 mapping them with a, s, d, f, j, k, l
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '( "a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC
*** The cursor follow-up a new windows
#+BEGIN_SRC emacs-lisp
   (defun vertical-win ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'vertical-win)

  (defun horizontal-win ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'horizontal-win)
#+END_SRC
** Subword (Nice for VarOld) M-b would go for the Uppercase letter
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
  #+END_SRC
** Matching (), "", {}, [].
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             (?\{ . ?\})))
  (electric-pair-mode t)
#+END_SRC
** Kill whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-word-function ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w") 'kill-word-function)
#+END_SRC
** Lines and column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Highlight syntax-pairs (), {}, [], etc..
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
* Terminal
** Set Bash as default shell
#+BEGIN_SRC emacs-lisp
(defvar term "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list term)))
(ad-activate 'ansi-term)
#+END_SRC
** Map Super+Enter to terminal
#+BEGIN_SRC emacs-lisp
(when window-system (global-set-key (kbd "<s-return>") 'ansi-term))
#+END_SRC
* Packages 
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** DashBoard
 #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :ensure t
        :config
        (dashboard-setup-startup-hook)
        (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
        (setq dashboard-items '((recents  . 5)))
        (setq dashboard-banner-logo-title "Workflow ideal"))
 #+END_SRC
** Dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
    ("s-d" . 'dmenu))
#+END_SRC
** Lines in codes
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
* IDO mode, buffer and file navigation 
** Enable IDO mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** IDO vertical mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC 
** SMEX, completion for M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Setup Ibuffer, a non-retard buffer navigator
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
** C-x k kills the current buffer
#+BEGIN_SRC emacs-lisp
  (defun murder-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'murder-buffer)
#+END_SRC
* EXWM
** Package
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
      (require 'exwm-config)
      (fringe-mode 1)
      (server-start)
      (exwm-config-ido)
      (setq exwm-workspace-number 3)
      (exwm-input-set-key (kbd "s-r") #'exwm-restart)
      (exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)
      (exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)
      (dotimes (i 10)
        (exwm-input-set-key (kbd (format "s-%d" i))
                            `(lambda ()
                               (interactive)
                               (exwm-workspace-switch-create ,i))))

      (push ?\C-q exwm-input-prefix-keys)
      (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

      (exwm-input-set-simulation-keys
       '(
         ;; movement
         ([?\C-b] . left)
         ([?\M-b] . C-left)
         ([?\C-f] . right)
         ([?\M-f] . C-right)
         ([?\C-p] . up)
         ([?\C-n] . down)
         ([?\C-a] . home)
         ([?\C-e] . end)
         ([?\M-v] . prior)
         ([?\C-v] . next)
         ([?\C-d] . delete)
         ([?\C-k] . (S-end delete))
         ;; cut/paste
         ([?\C-w] . ?\C-x)
         ([?\M-w] . ?\C-c)
         ([?\C-y] . ?\C-v)
         ;; search
         ([?\C-s] . ?\C-f)))

      (dolist (k '(XF86AudioLowerVolume
                 XF86AudioRaiseVolume
                 XF86PowerOff
                 XF86AudioMute
                 XF86AudioPlay
                 XF86AudioStop
                 XF86AudioPrev
                 XF86AudioNext
                 XF86ScreenSaver
                 XF68Back
                 XF86Forward
                 Scroll_Lock
                 print))
      (cl-pushnew k exwm-input-prefix-keys))
      (exwm-enable))
#+END_SRC
** Lauching programs
#+BEGIN_SRC emacs-lisp
  (defun exwm-async-run (name)
    (interactive)
    (start-process name nil name))

  (defun launch-browser ()
    (interactive)
    (exwm-async-run "firefox"))

  (defun launch-lock ()
    (interactive)
    (exwm-async-run "slock"))

  (global-set-key (kbd "s-i") 'launch-browser)
  (global-set-key (kbd "s-x") 'launch-lock)
#+END_SRC
** Audio control
#+BEGIN_SRC emacs-lisp
(defconst volVar "5")

  (defun audio/mute ()
    (interactive)
    (start-process "audio-mute" nil "amixer" "sset" "Master" "toggle"))

  (defun audio/raise-volume ()
    (interactive)
    (start-process "audio-mute" nil "amixer" "sset" "Master" (concat volVar "%+")))

  (defun audio/lower-volume ()
    (interactive)
    (start-process "audio-mute" nil "amixer" "sset" "Master" (concat volVar "%-")))

(global-set-key (kbd "<XF86AudioMute>") 'audio/mute)
(global-set-key (kbd "<XF86AudioRaiseVolume>") 'audio/raise-volume)
(global-set-key (kbd "<XF86AudioLowerVolume>") 'audio/lower-volume)
#+END_SRC
** Screenshots with imagemagick
#+BEGIN_SRC emacs-lisp
  (defun screenshot ()
     "Takes a fullscreen screenshot of the current workspace"
     (interactive)
     (when window-system
     (message "Cheese!")
     (start-process "screenshot" nil "import" "-window" "root" 
                (concat (getenv "HOME") "/" (subseq (number-to-string (float-time)) 0 10) ".png"))
     (message "Screenshot taken!")))
   (global-set-key (kbd "<print>") 'screenshot)

  (defun screenshot-window ()
     "Takes a screenshot of a region selected by the user."
     (interactive)
     (when window-system
     (call-process "import" nil nil nil ".newScreen.png")
     (call-process "convert" nil nil nil ".newScreen.png" "-shave" "1x1"
                   (concat (getenv "HOME") "/" (subseq (number-to-string (float-time)) 0 10) ".png"))
     (call-process "rm" nil nil nil ".newScreen.png"))
     (message "Screenshot taken!"))
   (global-set-key (kbd "<Scroll_Lock>") 'screenshot-window)
#+END_SRC
* Modeline
** Modeline(spaceline)
#+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC
** Hiding some minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'irony-mode)
    (diminish 'linum-relative-mode)
    (diminish 'eldoc-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode))
#+END_SRC
** Battery
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
      (setq fancy-battery-show-percentage t)
      (setq battery-update-interval 10)
      (if window-system
        (fancy-battery-mode)
        (display-battery-mode)))
#+END_SRC
** Time and date
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
* Org
**  C-c ' replace current buffer
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda  () (org-bullets-mode))))
#+END_SRC
** Highlight SRC syntax
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Macro programing languages SRC cases
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cc" "#+BEGIN_SRC c\n?\n#+END_SRC"))
#+END_SRC
  
* Programming packages
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** Company, main completion package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** A spellchecker that works with programming languages
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
     :ensure t)
#+END_SRC

** C/C++ Packages & Configs
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
** Elisp Packages & Configs
*** Company
#+BEGIN_SRC emacs-lisp
   (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
      :ensure t
      :config
      (setq inferior-lisp-program "/usr/bin/sbcl")
      (setq slime-contribs '(slime-fancy)))

    (use-package slime-company
      :ensure t
      :init
        (require 'company)
        (slime-setup '(slime-company)))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
 (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC
*** Eldoc mode
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC
