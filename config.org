* Basic configs
** Toolbar, menu and Scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1) 
#+END_SRC
** Replace Yes/No alias to y/n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Scrolls one line per time. instead of the retarded default
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Disable auto-save and backup files
#+BEGIN_SRC emacs-lisp
(setq make-save-default nil)
(setq make-backup-file nil)
#+END_SRC
** Hightline cursor line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** Removes annoying ring bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Enable "pretty simbols" like lambda
#+BEGIN_SRC emacs-lisp
(when window-system (global-prettify-symbols-mode t))
#+END_SRC
** Disables startup messages
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Edit config file function  
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload config file function
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** DashBoard
 #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
     (setq dashboard-items '((recents . 10)))
     (setq dashboard-banner-logo-title "Gentoo part two eletric bogaloo"))
 #+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
** Manage windows like a pro
*** Use switch-window plugin, it only works with windows > 2 mapping them with a, s, d, f, j, k, l
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '( "a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC
*** The cursor follow-up a new windows
#+BEGIN_SRC emacs-lisp
   (defun vertical-win ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'vertical-win)

  (defun horizontal-win ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'horizontal-win)
#+END_SRC
** Subword (Nice for VarOld) M-b would go for the Uppercase letter
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
  #+END_SRC
** Matching (), "", {}, [].
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             (?\{ . ?\})))
  (electric-pair-mode t)
#+END_SRC
** Kill whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-word-function ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w") 'kill-word-function)

#+END_SRC
** Lines and column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
* Terminal
** Set Bash as default shell
#+BEGIN_SRC emacs-lisp
(defvar term "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list term)))
(ad-activate 'ansi-term)
#+END_SRC
** Map Super+Enter to terminal
#+BEGIN_SRC emacs-lisp
(when window-system (global-set-key (kbd "<s-return>") 'ansi-term))
#+END_SRC
* Packages 
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** Dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
    ("s-d" . 'dmenu))
#+END_SRC
** Lines in codes
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** Highlight syntax-pairs (), {}, [], etc..
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* IDO mode, buffer and file navigation 
** Enable IDO mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** IDO vertical mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC 
** SMEX, completion for M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Setup Ibuffer, a non-retard buffer navigator
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
** C-x k kills the current buffer
#+BEGIN_SRC emacs-lisp
  (defun murder-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'murder-buffer)
#+END_SRC
* EXWM
** Basico
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC
* Status Bar
** Battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
** Time and date
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
* Org
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda  () (org-bullets-mode))))
#+END_SRC
** Highlight SRC syntax
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Macro programing languages SRC cases
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cc" "#+BEGIN_SRC c\n?\n#+END_SRC"))
#+END_SRC

* Company-autocomplete
** 0 delay, 1 char-prefix to work
#+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :init
        (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
